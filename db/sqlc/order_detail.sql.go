// Code generated by sqlc. DO NOT EDIT.
// source: order_detail.sql

package db

import (
	"context"
)

const createOrderDetail = `-- name: CreateOrderDetail :one
INSERT INTO order_details (
    detail_order_id,
    detail_product_id,
    detail_product_name,
    detail_unit_price,
    detail_unit_price,
    detail_sku,
    detail_quantity
) VALUES (
             $1, $2, $3, $4, $5, $6, $7
         ) RETURNING detail_id, detail_order_id, detail_product_id, detail_product_name, detail_unit_price, detail_sku, detail_quantity, created_at, updated_at
`

type CreateOrderDetailParams struct {
	DetailOrderID     int64   `json:"detail_order_id"`
	DetailProductID   int64   `json:"detail_product_id"`
	DetailProductName string  `json:"detail_product_name"`
	DetailUnitPrice   float64 `json:"detail_unit_price"`
	DetailUnitPrice_2 float64 `json:"detail_unit_price_2"`
	DetailSku         string  `json:"detail_sku"`
	DetailQuantity    int64   `json:"detail_quantity"`
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, createOrderDetail,
		arg.DetailOrderID,
		arg.DetailProductID,
		arg.DetailProductName,
		arg.DetailUnitPrice,
		arg.DetailUnitPrice_2,
		arg.DetailSku,
		arg.DetailQuantity,
	)
	var i OrderDetail
	err := row.Scan(
		&i.DetailID,
		&i.DetailOrderID,
		&i.DetailProductID,
		&i.DetailProductName,
		&i.DetailUnitPrice,
		&i.DetailSku,
		&i.DetailQuantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrderDetail = `-- name: DeleteOrderDetail :exec
DELETE FROM order_details
WHERE detail_id = $1
`

func (q *Queries) DeleteOrderDetail(ctx context.Context, detailID int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrderDetail, detailID)
	return err
}

const getOrderDetail = `-- name: GetOrderDetail :one
SELECT detail_id, detail_order_id, detail_product_id, detail_product_name, detail_unit_price, detail_sku, detail_quantity, created_at, updated_at FROM order_details
WHERE detail_id = $1 LIMIT 1
`

func (q *Queries) GetOrderDetail(ctx context.Context, detailID int64) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, getOrderDetail, detailID)
	var i OrderDetail
	err := row.Scan(
		&i.DetailID,
		&i.DetailOrderID,
		&i.DetailProductID,
		&i.DetailProductName,
		&i.DetailUnitPrice,
		&i.DetailSku,
		&i.DetailQuantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrderDetails = `-- name: ListOrderDetails :many
SELECT detail_id, detail_order_id, detail_product_id, detail_product_name, detail_unit_price, detail_sku, detail_quantity, created_at, updated_at FROM order_details
ORDER BY detail_id
LIMIT $1
    OFFSET $2
`

type ListOrderDetailsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrderDetails(ctx context.Context, arg ListOrderDetailsParams) ([]OrderDetail, error) {
	rows, err := q.db.QueryContext(ctx, listOrderDetails, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderDetail
	for rows.Next() {
		var i OrderDetail
		if err := rows.Scan(
			&i.DetailID,
			&i.DetailOrderID,
			&i.DetailProductID,
			&i.DetailProductName,
			&i.DetailUnitPrice,
			&i.DetailSku,
			&i.DetailQuantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderDetail = `-- name: UpdateOrderDetail :one
UPDATE order_details
SET detail_order_id = $2,
    detail_product_id = $3,
    detail_product_name = $4,
    detail_unit_price = $5,
    detail_unit_price = $6,
    detail_sku = $7,
    detail_quantity = $8
WHERE detail_id = $1
RETURNING detail_id, detail_order_id, detail_product_id, detail_product_name, detail_unit_price, detail_sku, detail_quantity, created_at, updated_at
`

type UpdateOrderDetailParams struct {
	DetailID          int64   `json:"detail_id"`
	DetailOrderID     int64   `json:"detail_order_id"`
	DetailProductID   int64   `json:"detail_product_id"`
	DetailProductName string  `json:"detail_product_name"`
	DetailUnitPrice   float64 `json:"detail_unit_price"`
	DetailUnitPrice_2 float64 `json:"detail_unit_price_2"`
	DetailSku         string  `json:"detail_sku"`
	DetailQuantity    int64   `json:"detail_quantity"`
}

func (q *Queries) UpdateOrderDetail(ctx context.Context, arg UpdateOrderDetailParams) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, updateOrderDetail,
		arg.DetailID,
		arg.DetailOrderID,
		arg.DetailProductID,
		arg.DetailProductName,
		arg.DetailUnitPrice,
		arg.DetailUnitPrice_2,
		arg.DetailSku,
		arg.DetailQuantity,
	)
	var i OrderDetail
	err := row.Scan(
		&i.DetailID,
		&i.DetailOrderID,
		&i.DetailProductID,
		&i.DetailProductName,
		&i.DetailUnitPrice,
		&i.DetailSku,
		&i.DetailQuantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
