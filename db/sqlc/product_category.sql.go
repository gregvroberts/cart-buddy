// Code generated by sqlc. DO NOT EDIT.
// source: product_category.sql

package db

import (
	"context"
)

const createProductCategory = `-- name: CreateProductCategory :one
INSERT INTO product_categories (
    category_name
) VALUES (
             $1
         ) RETURNING category_id, category_name
`

func (q *Queries) CreateProductCategory(ctx context.Context, categoryName string) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, createProductCategory, categoryName)
	var i ProductCategory
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}

const deleteProductCategory = `-- name: DeleteProductCategory :exec
DELETE FROM product_categories
WHERE category_id = $1
`

func (q *Queries) DeleteProductCategory(ctx context.Context, categoryID int64) error {
	_, err := q.db.ExecContext(ctx, deleteProductCategory, categoryID)
	return err
}

const getProductCategory = `-- name: GetProductCategory :one
SELECT category_id, category_name FROM product_categories
WHERE category_id = $1 LIMIT 1
`

func (q *Queries) GetProductCategory(ctx context.Context, categoryID int64) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategory, categoryID)
	var i ProductCategory
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}

const listProductCategories = `-- name: ListProductCategories :many
SELECT category_id, category_name FROM product_categories
ORDER BY category_id
LIMIT $1
    OFFSET $2
`

type ListProductCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductCategories(ctx context.Context, arg ListProductCategoriesParams) ([]ProductCategory, error) {
	rows, err := q.db.QueryContext(ctx, listProductCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductCategory
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(&i.CategoryID, &i.CategoryName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductCategory = `-- name: UpdateProductCategory :one
UPDATE product_categories
SET category_name = $2
WHERE category_id = $1
RETURNING category_id, category_name
`

type UpdateProductCategoryParams struct {
	CategoryID   int64  `json:"category_id"`
	CategoryName string `json:"category_name"`
}

func (q *Queries) UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, updateProductCategory, arg.CategoryID, arg.CategoryName)
	var i ProductCategory
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}
