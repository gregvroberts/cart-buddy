// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_f_name,
    user_l_name,
    user_email,
    user_city,
    user_state,
    user_postal,
    user_country,
    user_addr_1,
    user_addr_2
) VALUES (
    $1,$2,$3,$4,$5,$6,$7,$8,$9
         ) RETURNING user_id, user_f_name, user_l_name, user_email, user_email_verified, user_city, user_state, user_postal, user_country, user_addr_1, user_addr_2, created_at, updated_at
`

type CreateUserParams struct {
	UserFName   string         `json:"user_f_name"`
	UserLName   string         `json:"user_l_name"`
	UserEmail   string         `json:"user_email"`
	UserCity    string         `json:"user_city"`
	UserState   string         `json:"user_state"`
	UserPostal  string         `json:"user_postal"`
	UserCountry string         `json:"user_country"`
	UserAddr1   string         `json:"user_addr_1"`
	UserAddr2   sql.NullString `json:"user_addr_2"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserFName,
		arg.UserLName,
		arg.UserEmail,
		arg.UserCity,
		arg.UserState,
		arg.UserPostal,
		arg.UserCountry,
		arg.UserAddr1,
		arg.UserAddr2,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserFName,
		&i.UserLName,
		&i.UserEmail,
		&i.UserEmailVerified,
		&i.UserCity,
		&i.UserState,
		&i.UserPostal,
		&i.UserCountry,
		&i.UserAddr1,
		&i.UserAddr2,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_f_name, user_l_name, user_email, user_email_verified, user_city, user_state, user_postal, user_country, user_addr_1, user_addr_2, created_at, updated_at FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserFName,
		&i.UserLName,
		&i.UserEmail,
		&i.UserEmailVerified,
		&i.UserCity,
		&i.UserState,
		&i.UserPostal,
		&i.UserCountry,
		&i.UserAddr1,
		&i.UserAddr2,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, user_f_name, user_l_name, user_email, user_email_verified, user_city, user_state, user_postal, user_country, user_addr_1, user_addr_2, created_at, updated_at FROM users
ORDER BY user_id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserFName,
			&i.UserLName,
			&i.UserEmail,
			&i.UserEmailVerified,
			&i.UserCity,
			&i.UserState,
			&i.UserPostal,
			&i.UserCountry,
			&i.UserAddr1,
			&i.UserAddr2,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET user_f_name = $2,
    user_l_name = $3,
    user_email = $4,
    user_city = $5,
    user_state = $6,
    user_postal = $7,
    user_country = $8,
    user_addr_1 = $9,
    user_addr_2 = $10
WHERE user_id = $1
RETURNING user_id, user_f_name, user_l_name, user_email, user_email_verified, user_city, user_state, user_postal, user_country, user_addr_1, user_addr_2, created_at, updated_at
`

type UpdateUserParams struct {
	UserID      int64          `json:"user_id"`
	UserFName   string         `json:"user_f_name"`
	UserLName   string         `json:"user_l_name"`
	UserEmail   string         `json:"user_email"`
	UserCity    string         `json:"user_city"`
	UserState   string         `json:"user_state"`
	UserPostal  string         `json:"user_postal"`
	UserCountry string         `json:"user_country"`
	UserAddr1   string         `json:"user_addr_1"`
	UserAddr2   sql.NullString `json:"user_addr_2"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.UserID,
		arg.UserFName,
		arg.UserLName,
		arg.UserEmail,
		arg.UserCity,
		arg.UserState,
		arg.UserPostal,
		arg.UserCountry,
		arg.UserAddr1,
		arg.UserAddr2,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserFName,
		&i.UserLName,
		&i.UserEmail,
		&i.UserEmailVerified,
		&i.UserCity,
		&i.UserState,
		&i.UserPostal,
		&i.UserCountry,
		&i.UserAddr1,
		&i.UserAddr2,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
